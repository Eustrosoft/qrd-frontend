/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/api/secured/qrs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find all ranges for current user with filter */
        get: operations["findAllByRange"];
        /** Update data for QR */
        put: operations["update"];
        /** Create new QR */
        post: operations["create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/qrs/{id}/files/choose": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Add file to the QR (connect) */
        put: operations["chooseFile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/forms/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find form by ID */
        get: operations["findById_1"];
        /** Update form metadata by ID */
        put: operations["update_1"];
        post?: never;
        /** Delete form by ID */
        delete: operations["delete_1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/forms/{id}/files/choose": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Choose file from existing and connect it to the form */
        put: operations["chooseFile_1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/files/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get file by ID */
        get: operations["findById_2"];
        /** Update file metadata by ID */
        put: operations["update_2"];
        post?: never;
        /** Delete file by ID */
        delete: operations["deleteFile_2"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/admin/panel/participants/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find participant by ID */
        get: operations["findById_3"];
        /** Update participant data */
        put: operations["updateParticipant"];
        post?: never;
        /** Delete participant by ID */
        delete: operations["deleteParticipant"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/admin/panel/participants/{id}/ranges/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Add new range for participant */
        put: operations["addRangeToParticipant"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/admin/panel/participants/{id}/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Change participant password */
        put: operations["changeParticipantPassword"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/unsecured/registrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create new registration request */
        post: operations["saveRegistrationRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/qrs/{id}/files/{fileId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete file from QR (disconnect) */
        post: operations["deleteFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/qrs/{id}/files/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload new file in the QR */
        post: operations["uploadFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/participants/settings/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Change password for current user */
        post: operations["changePassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout from system */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/forms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find all forms for current user */
        get: operations["findAll"];
        put?: never;
        /** Create new form */
        post: operations["createForm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/forms/{id}/files/{fileId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete file from form (disconnect) */
        post: operations["deleteFile_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/forms/{id}/files/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload file in the form */
        post: operations["uploadFile_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/forms/default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create default form with filled fields */
        post: operations["createDefaultForm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/files/{id}/re-upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Re-upload file */
        post: operations["changeFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/files/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload file by file request (form-data) */
        post: operations["uploadFile_2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/files/upload/blob": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload file by blob protocol */
        post: operations["uploadFileBlob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login in the system */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/admin/registration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register new user (only by admin) */
        post: operations["createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/admin/panel/registrations/{id}/start-processing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start processing the request */
        post: operations["startProcessing"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/admin/panel/registrations/{id}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reject user registration request */
        post: operations["reject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/admin/panel/registrations/{id}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Accept user registration request */
        post: operations["accept"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/admin/panel/participants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of participants */
        get: operations["findAll_2"];
        put?: never;
        /** Add new participant */
        post: operations["addParticipant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/admin/panel/participants/unblock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Unblock participant */
        post: operations["unblockParticipant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/admin/panel/participants/ranges/revoke": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Revoke range from participant */
        post: operations["revokeRangeFromParticipant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/admin/panel/participants/block": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Block participant */
        post: operations["blockParticipant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/qrs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete QR */
        delete: operations["delete"];
        options?: never;
        head?: never;
        /** Set form for QR object */
        patch: operations["setFormForQr"];
        trace?: never;
    };
    "/v1/api/secured/participants/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get setting for current user */
        get: operations["getSettings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update settings for current user */
        patch: operations["updateSettings"];
        trace?: never;
    };
    "/v1/api/unsecured": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Test unsecured endpoint (all users) */
        get: operations["unsecured"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/unsecured/registrations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get status for registration request by UUID */
        get: operations["getRegistrationRequestStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/unsecured/qrs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get public card by Q parameter (available for all users, one of the main parts in the system) */
        get: operations["findById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/unsecured/files/{id}/download/{fileName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download file by ID and Filename */
        get: operations["downloadFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/unsecured/dev-log/versions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get versions list with changes */
        get: operations["getVersionsList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/unsecured/dev-log/versions/{version}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version info by version string */
        get: operations["getDevLog"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/unsecured/alive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if server is alive */
        get: operations["alive"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/unsecured/alive/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get server version is string format */
        get: operations["version"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Test secured endpoint (log-inned users) */
        get: operations["secured"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/ranges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all available ranges to create QRs for current user */
        get: operations["getMyRanges"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/qrs/code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get QR by code */
        get: operations["findByCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/participants/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get metadata of current user */
        get: operations["getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/forms/fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all available unique fields */
        get: operations["findAllFormFields"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find all files for current user */
        get: operations["findAll_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/files/{id}/download/{fileName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download file by ID and Filename */
        get: operations["downloadFile_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/dictionaries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of available dictionaries */
        get: operations["findListValues"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/secured/dictionaries/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get dictionary by code */
        get: operations["findByCodeAndName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/alive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Test if server is alive (all users) */
        get: operations["alive_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/admin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Test admin endpoint (only for admins) */
        get: operations["admin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/admin/panel/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all roles */
        get: operations["findAllRoles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/admin/panel/registrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all registration requests */
        get: operations["getRegistrationRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/admin/panel/registrations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get registration request by ID */
        get: operations["getRegistrationRequests_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/admin/panel/ranges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get free ranges to use */
        get: operations["getFreeRanges"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api/admin/panel/participants/{id}/qrs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Find all participants QRs */
        delete: operations["getParticipantQRs"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        JsonNode: Record<string, never>;
        QRChangeDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            name: string;
            description: string;
            data: components["schemas"]["JsonNode"];
            filesIds: number[];
            /** Format: int64 */
            formId: number;
            /** @enum {string} */
            action: "STD" | "REDIRECT" | "REDIRECT_QR_SVC" | "HIDE";
            redirect: string;
            /** Format: int64 */
            code: number;
            /** Format: int64 */
            rangeId: number;
        };
        FileDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            name: string;
            description: string;
            fileName: string;
            fileType: string;
            extension: string;
            isActive: boolean;
            /** Format: date-time */
            lastAccessed: string;
            checksum: string;
            isPublic: boolean;
            /** @enum {string} */
            fileStorageType: "S3" | "DB" | "LOCAL" | "URL";
            storagePath: string;
            /** Format: int64 */
            fileSize: number;
        };
        FormDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            name: string;
            description: string;
            data: string;
            fields: components["schemas"]["FormFieldDto"][];
            files: components["schemas"]["FileDto"][];
        };
        FormFieldDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            name: string;
            description: string;
            caption: string;
            placeholder: string;
            /** Format: int32 */
            fieldOrder: number;
            /** @enum {string} */
            fieldType: "TEXT" | "NUMBER" | "FILE" | "MEDIA_FILE" | "DATE" | "URL" | "PHONE" | "EMAIL" | "TEXTAREA" | "EDIT";
            isStatic: boolean;
            isPublic: boolean;
        };
        QRDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            name: string;
            description: string;
            /** Format: int64 */
            code: number;
            data: {
                [key: string]: Record<string, never>;
            };
            /** @enum {string} */
            action: "STD" | "REDIRECT" | "REDIRECT_QR_SVC" | "HIDE";
            redirect: string;
            form: components["schemas"]["FormDto"];
            files: components["schemas"]["FileDto"][];
        };
        FileChooseRequest: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            name: string;
            description: string;
        };
        File: {
            /** Format: int64 */
            id: number;
            type: string;
            name: string;
            description: string;
            /** Format: int64 */
            participantId: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            fileName: string;
            fileType: string;
            extension: string;
            isActive: boolean;
            /** Format: date-time */
            lastAccessed: string;
            checksum: string;
            isPublic: boolean;
            /** @enum {string} */
            storagePlace: "S3" | "DB" | "LOCAL" | "URL";
            storagePath: string;
            /** Format: int64 */
            fileSize: number;
        };
        FormChangeDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            name: string;
            description: string;
            data: components["schemas"]["JsonNode"];
            files: components["schemas"]["File"][];
            fields: components["schemas"]["FormFieldChangeDto"][];
        };
        FormFieldChangeDto: {
            name?: string;
            caption?: string;
            placeholder?: string;
            /** Format: int32 */
            fieldOrder?: number;
            /** @enum {string} */
            fieldType?: "TEXT" | "NUMBER" | "FILE" | "MEDIA_FILE" | "DATE" | "URL" | "PHONE" | "EMAIL" | "TEXTAREA" | "EDIT";
            isStatic: boolean;
            isPublic: boolean;
            /** Format: int64 */
            id?: number;
        };
        FileChangeDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            name: string;
            description: string;
            storagePath: string;
            isActive: boolean;
            isPublic: boolean;
        };
        ParticipantChangeDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            name: string;
            description: string;
            username: string;
            email: string;
            roles: components["schemas"]["RoleDto"][];
            lei: string;
            address: string;
            organization: string;
            website: string;
            banned: boolean;
            bannedReason: string;
            active: boolean;
            ranges: components["schemas"]["QRRangeDto"][];
            qrs: components["schemas"]["QRDto"][];
            password: string;
            confirmPassword: string;
        };
        QRRangeDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            name: string;
            description: string;
            /** Format: int64 */
            from: number;
            /** Format: int64 */
            to: number;
        };
        RoleDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            name: string;
            description: string;
            active: boolean;
        };
        QRRange: {
            /** Format: int64 */
            id: number;
            type: string;
            name: string;
            description: string;
            /** Format: int64 */
            participantId: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            /** Format: int64 */
            from: number;
            /** Format: int64 */
            to: number;
        };
        Form: {
            /** Format: int64 */
            id: number;
            type: string;
            name: string;
            description: string;
            /** Format: int64 */
            participantId: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            data: string;
            fields: components["schemas"]["FormField"][];
            files: components["schemas"]["File"][];
            qrs: components["schemas"]["QR"][];
        };
        FormField: {
            /** Format: int64 */
            id: number;
            name: string;
            /** Format: int64 */
            formId: number;
            form: components["schemas"]["Form"];
            caption: string;
            /** Format: int64 */
            participantId: number;
            /** Format: int32 */
            fieldOrder: number;
            placeholder: string;
            /** @enum {string} */
            fieldType: "TEXT" | "NUMBER" | "FILE" | "MEDIA_FILE" | "DATE" | "URL" | "PHONE" | "EMAIL" | "TEXTAREA" | "EDIT";
            isStatic: boolean;
            isPublic: boolean;
        };
        Participant: {
            /** Format: int64 */
            id: number;
            type: string;
            name: string;
            description: string;
            /** Format: int64 */
            participantId: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            username: string;
            password: string;
            email: string;
            /** Format: int64 */
            referer: number;
            lei: string;
            address: string;
            website: string;
            organization: string;
            settings: string;
            active: boolean;
            banned: boolean;
            bannedReason: string;
            files: components["schemas"]["File"][];
            roles: components["schemas"]["Role"][];
            ranges: components["schemas"]["QRRange"][];
            qrs: components["schemas"]["QR"][];
        };
        QR: {
            /** Format: int64 */
            id: number;
            type: string;
            name: string;
            description: string;
            /** Format: int64 */
            participantId: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            /** Format: int64 */
            code: number;
            data: string;
            /** Format: int64 */
            formId: number;
            form: components["schemas"]["Form"];
            files: components["schemas"]["File"][];
            /** @enum {string} */
            action: "STD" | "REDIRECT" | "REDIRECT_QR_SVC" | "HIDE";
            redirect: string;
        };
        Role: {
            /** Format: int64 */
            id: number;
            type: string;
            name: string;
            description: string;
            /** Format: int64 */
            participantId: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            active: boolean;
        };
        ParticipantChangePasswordDto: {
            password: string;
            confirmPassword: string;
        };
        RegistrationRequestCreationDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            created?: string;
            /** Format: date-time */
            updated?: string;
            name?: string;
            description?: string;
            firstName: string;
            lastName?: string;
            email: string;
            phoneNumber: string;
            website?: string;
            organization: string;
            country?: string;
            city?: string;
        };
        QRCreationDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            name: string;
            description: string;
            data: components["schemas"]["JsonNode"];
            filesIds: number[];
            /** Format: int64 */
            formId: number;
            /** @enum {string} */
            action: "STD" | "REDIRECT" | "REDIRECT_QR_SVC" | "HIDE";
            redirect: string;
            /** Format: int64 */
            code: number;
            /** Format: int64 */
            rangeId: number;
        };
        FileUploadRequest: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            name: string;
            description: string;
            /** Format: binary */
            file: string;
            storagePath: string;
            /** @enum {string} */
            fileStorageType: "S3" | "DB" | "LOCAL" | "URL";
            public: boolean;
            active: boolean;
        };
        PasswordChangeDto: {
            oldPassword: string;
            newPassword: string;
            confirmNewPassword: string;
        };
        FormCreationDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            name: string;
            description: string;
            data: components["schemas"]["JsonNode"];
            fields: components["schemas"]["FormFieldCreationDto"][];
            files: components["schemas"]["File"][];
        };
        FormFieldCreationDto: {
            name?: string;
            caption?: string;
            placeholder?: string;
            /** Format: int32 */
            fieldOrder?: number;
            /** @enum {string} */
            fieldType?: "TEXT" | "NUMBER" | "FILE" | "MEDIA_FILE" | "DATE" | "URL" | "PHONE" | "EMAIL" | "TEXTAREA" | "EDIT";
            isStatic: boolean;
            isPublic: boolean;
        };
        FileProjection: {
            fileName: string;
            extension: string;
            fileType: string;
            isActive: boolean;
            /** Format: date-time */
            lastAccessed: string;
            checksum: string;
            isPublic: boolean;
            /** @enum {string} */
            storagePlace: "S3" | "DB" | "LOCAL" | "URL";
            storagePath: string;
            /** Format: int64 */
            fileSize: number;
            description: string;
            name: string;
            /** Format: int64 */
            participantId: number;
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
        };
        FileReUploadRequest: {
            /** Format: binary */
            file: string;
        };
        FileWithBlobUploadRequest: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            name: string;
            description: string;
            /** Format: int64 */
            fileId: number;
            /** Format: int64 */
            no: number;
            /** Format: int64 */
            total: number;
            /** Format: binary */
            chunk: string;
            /** Format: int64 */
            fileSize: number;
            storagePath: string;
            /** @enum {string} */
            fileStorageType: "S3" | "DB" | "LOCAL" | "URL";
            public: boolean;
            active: boolean;
        };
        FileUploadResponse: {
            /** Format: int64 */
            fileId: number;
            /** Format: int64 */
            no: number;
        };
        UserLoginDto: {
            username: string;
            password: string;
        };
        RegistrationDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            name: string;
            description: string;
            username: string;
            email: string;
            roles: components["schemas"]["RoleDto"][];
            lei: string;
            address: string;
            organization: string;
            website: string;
            banned: boolean;
            bannedReason: string;
            active: boolean;
            ranges: components["schemas"]["QRRangeDto"][];
            qrs: components["schemas"]["QRDto"][];
            password: string;
            confirmPassword: string;
        };
        ParticipantDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            name: string;
            description: string;
            username: string;
            email: string;
            roles: components["schemas"]["RoleDto"][];
            lei: string;
            address: string;
            organization: string;
            website: string;
            banned: boolean;
            bannedReason: string;
            active: boolean;
            ranges: components["schemas"]["QRRangeDto"][];
            qrs: components["schemas"]["QRDto"][];
        };
        RegistrationRequestDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            name: string;
            description: string;
            username: string;
            password: string;
            email: string;
            ipAddress: string;
            userAgent: string;
            referrerUrl: string;
            firstName: string;
            lastName: string;
            webSite: string;
            organization: string;
            phoneNumber: string;
            country: string;
            city: string;
            /** @enum {string} */
            status: "PENDING" | "IN_WORK" | "ACCEPTED" | "REJECTED";
            statusMsg: string;
            /** Format: uuid */
            registrationId: string;
            reviewedBy: components["schemas"]["ParticipantDto"];
            /** Format: date-time */
            reviewedAt: string;
        };
        EntityDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
            name: string;
            description: string;
        };
        ParticipantBlockDto: {
            /** Format: int64 */
            id: number;
            reason?: string;
        };
        SettingsChangeDto: {
            settings: components["schemas"]["JsonNode"];
        };
        SettingsDto: {
            settings: string;
        };
        RegistrationRequestDetails: {
            /** @enum {string} */
            status: "PENDING" | "IN_WORK" | "ACCEPTED" | "REJECTED";
            username: string;
            statusMsg: string;
        };
        VersionDto: {
            version: string;
            releaseDate: string;
            author: string;
            content: string;
        };
        QRRequestFilter: {
            /** Format: int64 */
            rangeId: number;
            emptyFilters: boolean;
        };
        Dictionary: {
            name: string;
            code: string;
            value: string;
            description: string;
        };
        ParticipantAdminSimpleProjection: {
            address: string;
            roles: components["schemas"]["Role"][];
            username: string;
            active: boolean;
            email: string;
            lei: string;
            organization: string;
            website: string;
            banned: boolean;
            ranges: components["schemas"]["QRRange"][];
            description: string;
            name: string;
            /** Format: int64 */
            participantId: number;
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    findAllByRange: {
        parameters: {
            query: {
                filter: components["schemas"]["QRRequestFilter"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"][];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"][];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"][];
                };
            };
        };
    };
    update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QRChangeDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
        };
    };
    create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QRCreationDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
        };
    };
    chooseFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FileChooseRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findById_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormDto"];
                };
            };
        };
    };
    update_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FormChangeDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormDto"];
                };
            };
        };
    };
    delete_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    chooseFile_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FileChooseRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findById_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileDto"];
                };
            };
        };
    };
    update_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FileChangeDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileDto"];
                };
            };
        };
    };
    deleteFile_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findById_3: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ParticipantDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ParticipantDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ParticipantDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ParticipantDto"];
                };
            };
        };
    };
    updateParticipant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ParticipantChangeDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteParticipant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addRangeToParticipant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QRRange"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Participant"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Participant"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Participant"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Participant"];
                };
            };
        };
    };
    changeParticipantPassword: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ParticipantChangePasswordDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    saveRegistrationRequest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegistrationRequestCreationDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    deleteFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
                fileId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
        };
    };
    uploadFile: {
        parameters: {
            query: {
                fur: components["schemas"]["FileUploadRequest"];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
        };
    };
    changePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordChangeDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormDto"][];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormDto"][];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormDto"][];
                };
            };
        };
    };
    createForm: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FormCreationDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormDto"];
                };
            };
        };
    };
    deleteFile_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
                fileId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    uploadFile_1: {
        parameters: {
            query: {
                fur: components["schemas"]["FileUploadRequest"];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileProjection"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileProjection"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileProjection"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileProjection"];
                };
            };
        };
    };
    createDefaultForm: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormDto"];
                };
            };
        };
    };
    changeFile: {
        parameters: {
            query: {
                fur: components["schemas"]["FileReUploadRequest"];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileDto"];
                };
            };
        };
    };
    uploadFile_2: {
        parameters: {
            query: {
                fur: components["schemas"]["FileUploadRequest"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileDto"];
                };
            };
        };
    };
    uploadFileBlob: {
        parameters: {
            query: {
                fur: components["schemas"]["FileWithBlobUploadRequest"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileUploadResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileUploadResponse"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileUploadResponse"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileUploadResponse"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserLoginDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    createUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegistrationDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    startProcessing: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDto"];
                };
            };
        };
    };
    reject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDto"];
                };
            };
        };
    };
    accept: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDto"];
                };
            };
        };
    };
    findAll_2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ParticipantAdminSimpleProjection"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ParticipantAdminSimpleProjection"][];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ParticipantAdminSimpleProjection"][];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ParticipantAdminSimpleProjection"][];
                };
            };
        };
    };
    addParticipant: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegistrationDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Participant"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Participant"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Participant"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Participant"];
                };
            };
        };
    };
    unblockParticipant: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntityDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    revokeRangeFromParticipant: {
        parameters: {
            query: {
                participant: components["schemas"]["Participant"];
                range: components["schemas"]["QRRange"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Participant"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Participant"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Participant"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Participant"];
                };
            };
        };
    };
    blockParticipant: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ParticipantBlockDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setFormForQr: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": number;
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
        };
    };
    getSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SettingsDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SettingsDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SettingsDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SettingsDto"];
                };
            };
        };
    };
    updateSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SettingsChangeDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SettingsDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SettingsDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SettingsDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SettingsDto"];
                };
            };
        };
    };
    unsecured: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    getRegistrationRequestStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDetails"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDetails"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDetails"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDetails"];
                };
            };
        };
    };
    findById: {
        parameters: {
            query: {
                q: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
        };
    };
    downloadFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
                fileName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getVersionsList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VersionDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VersionDto"][];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VersionDto"][];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VersionDto"][];
                };
            };
        };
    };
    getDevLog: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VersionDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VersionDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VersionDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VersionDto"];
                };
            };
        };
    };
    alive: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    version: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    secured: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    getMyRanges: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRRange"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRRange"][];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRRange"][];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRRange"][];
                };
            };
        };
    };
    findByCode: {
        parameters: {
            query: {
                q: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"];
                };
            };
        };
    };
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ParticipantDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ParticipantDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ParticipantDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ParticipantDto"];
                };
            };
        };
    };
    findAllFormFields: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormFieldDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormFieldDto"][];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormFieldDto"][];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FormFieldDto"][];
                };
            };
        };
    };
    findAll_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileDto"][];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileDto"][];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FileDto"][];
                };
            };
        };
    };
    downloadFile_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
                fileName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findListValues: {
        parameters: {
            query: {
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Dictionary"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Dictionary"][];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Dictionary"][];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Dictionary"][];
                };
            };
        };
    };
    findByCodeAndName: {
        parameters: {
            query: {
                name: string;
            };
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Dictionary"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Dictionary"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Dictionary"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Dictionary"];
                };
            };
        };
    };
    alive_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    admin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    findAllRoles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RoleDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RoleDto"][];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RoleDto"][];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RoleDto"][];
                };
            };
        };
    };
    getRegistrationRequests: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDto"][];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDto"][];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDto"][];
                };
            };
        };
    };
    getRegistrationRequests_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDto"];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDto"];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegistrationRequestDto"];
                };
            };
        };
    };
    getFreeRanges: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRRangeDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRRangeDto"][];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRRangeDto"][];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRRangeDto"][];
                };
            };
        };
    };
    getParticipantQRs: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"][];
                };
            };
            /** @description Unallowed to use this endpoint */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"][];
                };
            };
            /** @description Error on server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QRDto"][];
                };
            };
        };
    };
}
